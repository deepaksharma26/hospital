{"version":3,"file":"static/js/714.b6be20dd.chunk.js","mappings":"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","sources":["app/user/addUser.jsx","utills/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Box, Card, Typography, TextField, Button } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { registerUser } from '../redux/registerSlice'; // Assuming you have a registerSlice\nimport { checkvalidEmail, checkvalidPassword } from '../../utills';\nimport { useRef } from 'react';\n\nconst AddUser = ({props}) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [errorTxt, setErrorTxt] = useState('');\n    const [eyeOpen, setEyeOpen] = useState(false);\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const firstNameInput = useRef(null);\n    const lastNameInput = useRef(null);\n    const mobileInput = useRef(null);\n    const emailInput = useRef(null);\n    const passwordInput = useRef(null); \n    const confirmPasswordInput = useRef(null); \n    const { data, loading, error } = useSelector((state) => state.register);\n    const dispatch = useDispatch();\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValidEmail = checkvalidEmail(email);\n        const isValidPassword = checkvalidPassword(password);\n\n        if (!firstName) {\n            setErrorTxt('First Name is required');\n            firstNameInput.current.focus(); \n        } else if (!lastName) {\n            setErrorTxt('Last Name is required');\n            lastNameInput.current.focus();\n        } else if (!mobile) {\n            setErrorTxt('Mobile is required');\n            mobileInput.current.focus();    \n        }if (!email) {\n            setErrorTxt('Email is required');\n            emailInput.current.focus();\n        }else if(password.length < 8) {\n            setErrorTxt('Password must be at least 8 characters long');\n            passwordInput.current.focus();\n        } else if (!password.match(/[0-9]/) || !password.match(/[\\W]/) || !password.match(/[\\W_]/)) {\n            setErrorTxt('Password must contain at least one number and one special character');\n            passwordInput.current.focus();\n        } else if (!confirmPassword) {\n            setErrorTxt('Confirm Password is required');\n            confirmPasswordInput.current.focus();\n        }else if (password !== confirmPassword) {\n            setErrorTxt('Passwords do not match');\n            confirmPasswordInput.current.focus();\n        }else if (!isValidEmail) {\n            setErrorTxt('Invalid email format');\n            emailInput.current.focus();\n        }\n        // else if (!isValidPassword) {\n        //     setErrorTxt('Password must be at least 8 characters long and contain at least one number and one special character');\n        // } \n        else {\n            const data={\n                firstname:firstName,\n                lastname:lastName,\n                mobilenumber:mobile,\n                email,\n                password,\n                username: email, // Assuming username is the same as email\n                createdBy: 'self', // Assuming createdBy is the same as email\n                role: 0, // Default role, can be changed as needed\n                status: false // Assuming 1 is for active status\n            }\n            dispatch(registerUser(data))\n                .then((response) => {\n                    if (response.error) {\n                        setErrorTxt(response.error.message);\n                    }else if(loading){\n                        setErrorTxt('Please Wait We Are Registering The user...');\n                    } else {\n                        setErrorTxt('Registration Successful');\n                        window.location.href = '/login'; // Redirect to login page after successful registration\n                    }\n                });\n        }\n    };\n    return (\n        <Box sx={{ width: '100%', height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: '#f5f5f5' }}>\n\n            <Card sx={{ width: '400px', padding: '20px' }}> \n                <form>\n                    {/* firstname lastname mobile fields */}\n                    <TextField\n                        ref={firstNameInput}\n                        label=\"First Name\"\n                        color='error'\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type=\"text\"\n                        onChange={(e) => setFirstName(e.target.value)}\n                    />\n                    <TextField\n                        ref={lastNameInput}\n                        label=\"Last Name\"\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type=\"text\"\n                        onChange={(e) => setLastName(e.target.value)}\n                    />\n                    <TextField\n                        ref={mobileInput}\n                        label=\"Mobile\"\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type=\"text\"\n                        onChange={(e) => setMobile(e.target.value)}\n                    />\n                    <TextField\n                        ref={emailInput}\n                        label=\"Email\"\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type=\"email\"\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <TextField\n                        ref={passwordInput}\n                        label=\"Password\"\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type={eyeOpen ? 'text' : 'password'}\n                        onChange={(e) => setPassword(e.target.value)}\n                        InputProps={{\n                            endAdornment: (\n                                <Button onClick={() => setEyeOpen(!eyeOpen)} variant=\"text\">\n                                    {eyeOpen ? 'Hide' : 'Show'}\n                                </Button>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        ref={confirmPasswordInput}\n                        label=\"Confirm Password\"\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type={eyeOpen ? 'text' : 'password'}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                        InputProps={{\n                            endAdornment: (\n                                <Button onClick={() => setEyeOpen(!eyeOpen)} variant=\"text\">\n                                    {eyeOpen ? 'Hide' : 'Show'}\n                                </Button>\n                            ),\n                        }}\n                    />\n                    {/* Submit button */}\n                    <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\" fullWidth type=\"submit\">\n                        Register\n                    </Button>\n                    {errorTxt && <Typography color=\"error\" variant=\"body2\" sx={{ textAlign: 'center', padding: '10px', textTransform: 'capitalize' }}>{errorTxt}</Typography>}\n\n                </form>\n\n                <p style={{ marginTop: '10px' }}>\n                    Already have an account? <a href=\"/login\">Login</a>\n                </p>\n            </Card>\n        </Box>\n    );\n} \nexport default AddUser;","export const formatDate = (date) => {\n  const options = {  day: 'numeric', month: 'long', year: 'numeric' };\n  return new Date(date).toLocaleDateString(undefined, options);\n}\nexport const formatTime = (time) => {\n  const options = { hour: '2-digit', minute: '2-digit', second: '2-digit' };\n  return new Date(time).toLocaleTimeString(undefined, options);\n}\nexport const formatDateTime = (dateTime) => {\n  const date = formatDate(dateTime);\n  const time = formatTime(dateTime);\n  return `${date} at ${time}`;\n}\nexport const formatNumber = (number) => {\n  return new Intl.NumberFormat().format(number);\n}\nexport const formatCurrency = (amount, currency = 'USD') => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency\n  }).format(amount);\n}\nexport const formatPercentage = (value) => {\n  return `${(value * 100).toFixed(2)}%`;\n}\nexport const formatDuration = (seconds) => {    \n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}m ${remainingSeconds}s`;\n}   \nexport const checkvalidEmail = (email) => {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(String(email).toLowerCase());\n}\nexport const checkvalidPhone = (phone) => {\n  const re = /^\\+?[1-9]\\d{1,14}$/; // E.164 format\n  return re.test(String(phone).toLowerCase());\n}\nexport const checkvalidPassword = (password) => {\n  // At least 8 characters, one uppercase, one lowercase, one number, and one special character\n  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n  return re.test(String(password));\n}\nexport const windowWidth = () => {\n  return  window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n}\n"],"names":["_ref","props","email","setEmail","useState","password","setPassword","firstName","setFirstName","lastName","setLastName","mobile","setMobile","errorTxt","setErrorTxt","eyeOpen","setEyeOpen","confirmPassword","setConfirmPassword","firstNameInput","useRef","lastNameInput","mobileInput","emailInput","passwordInput","confirmPasswordInput","data","loading","error","useSelector","state","register","dispatch","useDispatch","_jsx","Box","sx","width","height","display","justifyContent","alignItems","backgroundColor","children","_jsxs","Card","padding","TextField","ref","label","color","variant","fullWidth","margin","type","onChange","e","target","value","InputProps","endAdornment","Button","onClick","preventDefault","isValidEmail","checkvalidEmail","checkvalidPassword","current","focus","length","match","firstname","lastname","mobilenumber","username","createdBy","role","status","registerUser","then","response","message","window","location","href","Typography","textAlign","textTransform","style","marginTop","formatDate","date","Date","toLocaleDateString","undefined","day","month","year","test","String","toLowerCase","windowWidth","innerWidth","document","documentElement","clientWidth","body"],"sourceRoot":""}