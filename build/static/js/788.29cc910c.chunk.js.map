{"version":3,"file":"static/js/788.29cc910c.chunk.js","mappings":"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","sources":["app/billingCategory/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n    Box,\n    Paper,\n    Typography,\n    TextField,\n    Button,\n    Grid,\n    IconButton,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Snackbar,\n    Alert,\n    Switch\n} from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createBillingCategory, deleteBillingCategory, fetchBillingCategories, updateBillingCategory } from '../redux/billingCategorySlice';\nimport { updateBilling } from '../redux/billingSlice';\nimport { render } from '@testing-library/react';\n\nconst BillingCategory = () => {\n    const [categories, setCategories] = useState([]);\n    const [form, setForm] = useState({id:'', name: '', description: '' });\n    const [editId, setEditId] = useState(null);\n    const [openDialog, setOpenDialog] = useState(false);\n    const [deleteId, setDeleteId] = useState(null);\n    const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n    const dispatch = useDispatch();\n    const { billingCategory } = useSelector((state) => state.billingCategory);\n    // Fetch categories\n    useEffect(() => {\n        dispatch(fetchBillingCategories()).then(res => {\n            if (res.payload) {\n                setCategories(res.payload);\n            } else {\n                console.error('Failed to fetch categories:', res.error);\n            }\n        });\n    }, [dispatch]);\n\n\n    const handleChange = (e) => {\n        setForm({ ...form, [e.target.name]: e.target.value });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            if (editId) {\n                dispatch(updateBillingCategory(form)).then(() => { \n                    dispatch(fetchBillingCategories());\n                    setSnackbar({ open: true, message: 'Category updated!', severity: 'success' });\n                });\n            } else {\n                dispatch(createBillingCategory(form)).then(() => {\n                    dispatch(fetchBillingCategories());\n                    setSnackbar({ open: true, message: 'Category created!', severity: 'success' });\n                });\n            }\n            \n            setForm({ name: '', description: '' });\n            setEditId(null); \n        } catch (err) {\n            setSnackbar({ open: true, message: 'Operation failed', severity: 'error' });\n        }\n    };\n\n    const handleEdit = (category) => {\n        setForm({id: category._id, name: category.name, description: category.description });\n        setEditId(category._id);\n        window.scrollTo({ top: 0, behavior: 'smooth' }); \n    };\n\n    const handleDelete = async () => {\n        dispatch(deleteBillingCategory(deleteId)).then((res) => {\n            if (res.error) {\n                setSnackbar({ open: true, message: 'Failed to delete category', severity: 'error' });\n                return;\n            }\n            setSnackbar({ open: true, message: 'Category deleted!', severity: 'success' });\n            setDeleteId(null);\n            dispatch(fetchBillingCategories());\n        }).catch((err) => {         \n            setSnackbar({ open: true, message: 'Failed to delete category', severity: 'error' });\n        });\n    };\n\n    const handleStatusChange = (category) => {\n        const updatedCategory = { ...category, id: category?._id, isActive: !category.isActive };\n        dispatch(updateBillingCategory(updatedCategory)).then(() => {\n            dispatch(fetchBillingCategories());\n            setSnackbar({ open: true, message: `Category ${updatedCategory.isActive ? 'activated' : 'deactivated'}!`, severity: 'success' });\n        }).catch((err) => {\n            setSnackbar({ open: true, message: 'Failed to update status', severity: 'error' });\n        });\n    };\n    const columns = [\n        {\n            field: 'name', headerName:'Category Name', flex: 1, minWidth: 180\n        },\n        {\n            field: 'description', headerName:'Description', flex: 2, minWidth: 220\n        },\n        {\n            field: 'isActive', headerName: 'Status', flex: 2, minWidth: 120,\n            renderCell: (params) => (\n                <Switch\n                    checked={params.row.isActive}\n                    color={params.row.isActive ? 'success' : 'error'}\n                />\n            )\n        },\n        {\n            field: 'actions',\n            headerName: 'Actions',\n            width: 140,\n            sortable: false,\n            renderCell: (params) => (\n                <>\n                    <IconButton color=\"primary\" onClick={() => handleEdit(params.row)}>\n                        <EditIcon />\n                    </IconButton>\n                    <IconButton color=\"error\" onClick={() => setDeleteId(params.row._id)}>\n                        <DeleteIcon />\n                    </IconButton>\n                </>\n            ),\n        },\n    ];\n\n    return (\n        <Box sx={{ width: '100%', minHeight: '100vh', background: '#f8fafc', py: { xs: 1, sm: 3 } }}>\n            {/* Header Section */}\n            <Paper\n                elevation={4}\n                sx={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    flexWrap: 'wrap',\n                    p: { xs: 2, sm: 3 },\n                    mb: 4,\n                    borderRadius: 3,\n                    background: 'linear-gradient(90deg, #43cea2 0%, #185a9d 100%)',\n                    color: '#fff',\n                    boxShadow: 6,\n                }}\n            >\n                <Typography variant=\"h5\" fontWeight=\"bold\" sx={{ letterSpacing: 1 }}>\n                    🗂️ Manage Billing Categories\n                </Typography>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    sx={{\n                        fontWeight: 700,\n                        background: 'linear-gradient(90deg, #ff9966 0%, #ff5e62 100%)',\n                        color: '#fff',\n                        boxShadow: 2,\n                        ml: 'auto',\n                        '&:hover': {\n                            background: 'linear-gradient(90deg, #ff5e62 0%, #ff9966 100%)',\n                        },\n                    }}\n                    onClick={() => dispatch(fetchBillingCategories({}))}\n                >\n                    Refresh\n                </Button>\n            </Paper>\n\n            {/* Form Section */}\n            <Box sx={{ maxWidth: 900, mx: 'auto', p: { xs: 1, sm: 2 }, width: '100%' }}>\n                <Paper\n                    sx={{\n                        p: 3,\n                        mb: 4,\n                        background: 'linear-gradient(90deg, #43cea2 0%, #185a9d 100%)',\n                        color: '#fff',\n                        borderRadius: 3,\n                        boxShadow: 4,\n                    }}\n                >\n                    <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n                        {editId ? 'Update Billing Category' : 'Create Billing Category'}\n                    </Typography>\n                    <form onSubmit={handleSubmit}>\n                        <Grid container spacing={2} alignItems=\"center\">\n                            <Grid item xs={12} sm={5}>\n                                <TextField\n                                    label=\"Category Name\"\n                                    name=\"name\"\n                                    value={form.name}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    required\n                                    variant=\"filled\"\n                                    InputProps={{\n                                        style: { background: 'rgba(255,255,255,0.15)', borderRadius: 8, color: '#fff', fontWeight: 600 }\n                                    }}\n                                    InputLabelProps={{\n                                        style: { color: '#fff' }\n                                    }}\n                                    sx={{\n                                        input: { color: '#fff', fontWeight: 600 },\n                                        label: { color: '#fff' }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={5}>\n                                <TextField\n                                    label=\"Description\"\n                                    name=\"description\"\n                                    value={form.description}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    variant=\"filled\"\n                                    InputProps={{\n                                        style: { background: 'rgba(255,255,255,0.15)', borderRadius: 8, color: '#fff' }\n                                    }}\n                                    InputLabelProps={{\n                                        style: { color: '#fff' }\n                                    }}\n                                    sx={{\n                                        input: { color: '#fff' },\n                                        label: { color: '#fff' }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={2}>\n                                <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color={editId ? \"warning\" : \"secondary\"}\n                                    startIcon={<AddCircleIcon />}\n                                    fullWidth\n                                    sx={{\n                                        height: 56,\n                                        fontWeight: 700,\n                                        fontSize: 16,\n                                        background: editId\n                                            ? 'linear-gradient(90deg, #f7971e 0%, #ffd200 100%)'\n                                            : 'linear-gradient(90deg, #ff9966 0%, #ff5e62 100%)',\n                                        color: '#fff',\n                                        boxShadow: 2,\n                                        '&:hover': {\n                                            background: editId\n                                                ? 'linear-gradient(90deg, #ffd200 0%, #f7971e 100%)'\n                                                : 'linear-gradient(90deg, #ff5e62 0%, #ff9966 100%)',\n                                        },\n                                    }}\n                                >\n                                    {editId ? 'Update' : 'Create'}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Paper>\n\n                {/* Data Table Section */}\n                <Paper sx={{\n                    p: 2,\n                    borderRadius: 3,\n                    boxShadow: 2,\n                    background: '#fff',\n                    mb: 4,\n                }}>\n                    <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ mb: 2, color: '#185a9d' }}>\n                        Billing Categories\n                    </Typography>\n                    <div style={{ width: '100%', minHeight: 350 }}>\n                        <DataGrid\n                            rows={billingCategory}\n                            columns={columns}\n                            getRowId={(row) => row._id}\n                            pageSize={7}\n                            rowsPerPageOptions={[7, 15, 30]}\n                            autoHeight\n                            disableSelectionOnClick\n                            sx={{\n                                background: 'rgba(255,255,255,0.97)',\n                                borderRadius: 2,\n                                '& .MuiDataGrid-columnHeaders': {\n                                    background: 'linear-gradient(90deg, #43cea2 0%, #185a9d 100%)',\n                                    // color: '#fff',\n                                    fontWeight: 700,\n                                    fontSize: 16,\n                                },\n                                '& .MuiDataGrid-row:hover': {\n                                    background: 'rgba(67,206,162,0.08)',\n                                },\n                                '& .MuiDataGrid-cell': {\n                                    fontSize: 15,\n                                },\n                            }}\n                        />\n                    </div>\n                </Paper>\n\n                {/* Delete Confirmation Dialog */}\n                <Dialog open={!!deleteId} onClose={() => setDeleteId(null)}>\n                    <DialogTitle>Delete Category?</DialogTitle>\n                    <DialogContent>\n                        Are you sure you want to delete this billing category? This action cannot be undone.\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => setDeleteId(null)} color=\"primary\">Cancel</Button>\n                        <Button onClick={handleDelete} color=\"error\" variant=\"contained\">Delete</Button>\n                    </DialogActions>\n                </Dialog>\n\n                {/* Snackbar for feedback */}\n                <Snackbar\n                    open={snackbar.open}\n                    autoHideDuration={3000}\n                    onClose={() => setSnackbar({ ...snackbar, open: false })}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                >\n                    <Alert severity={snackbar.severity} sx={{ width: '100%' }}>\n                        {snackbar.message}\n                    </Alert>\n                </Snackbar>\n            </Box>\n        </Box>\n    );\n};\n\nexport default BillingCategory;"],"names":["BillingCategory","categories","setCategories","useState","form","setForm","id","name","description","editId","setEditId","openDialog","setOpenDialog","deleteId","setDeleteId","snackbar","setSnackbar","open","message","severity","dispatch","useDispatch","billingCategory","useSelector","state","useEffect","fetchBillingCategories","then","res","payload","console","error","handleChange","e","target","value","columns","field","headerName","flex","minWidth","renderCell","params","_jsx","Switch","checked","row","isActive","color","width","sortable","_jsxs","_Fragment","children","IconButton","onClick","handleEdit","category","_id","window","scrollTo","top","behavior","EditIcon","DeleteIcon","Box","sx","minHeight","background","py","xs","sm","Paper","elevation","display","alignItems","justifyContent","flexWrap","p","mb","borderRadius","boxShadow","Typography","variant","fontWeight","letterSpacing","Button","ml","maxWidth","mx","gutterBottom","onSubmit","async","preventDefault","updateBillingCategory","createBillingCategory","err","Grid","container","spacing","item","TextField","label","onChange","fullWidth","required","InputProps","style","InputLabelProps","input","type","startIcon","AddCircleIcon","height","fontSize","DataGrid","rows","getRowId","pageSize","rowsPerPageOptions","autoHeight","disableSelectionOnClick","Dialog","onClose","DialogTitle","DialogContent","DialogActions","deleteBillingCategory","catch","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert"],"sourceRoot":""}