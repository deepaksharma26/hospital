{"version":3,"file":"static/js/113.331fbc9e.chunk.js","mappings":"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","sources":["app/auth/register/index.js","utills/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Box, Card, Typography, TextField, Button } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { registerUser } from '../../../app/redux/registerSlice'; // Assuming you have a registerSlice\nimport { checkvalidEmail, checkvalidPassword } from '../../../utills';\nimport { useRef } from 'react';\n\nconst Register = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [errorTxt, setErrorTxt] = useState('');\n    const [eyeOpen, setEyeOpen] = useState(false);\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const firstNameInput = useRef(null);\n    const lastNameInput = useRef(null);\n    const mobileInput = useRef(null);\n    const emailInput = useRef(null);\n    const passwordInput = useRef(null); \n    const confirmPasswordInput = useRef(null); \n    const { data, loading, error } = useSelector((state) => state.register);\n    const dispatch = useDispatch();\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValidEmail = checkvalidEmail(email);\n        const isValidPassword = checkvalidPassword(password);\n\n        if (!firstName) {\n            setErrorTxt('First Name is required');\n            firstNameInput.current.focus(); \n        } else if (!lastName) {\n            setErrorTxt('Last Name is required');\n            lastNameInput.current.focus();\n        } else if (!mobile) {\n            setErrorTxt('Mobile is required');\n            mobileInput.current.focus();    \n        }if (!email) {\n            setErrorTxt('Email is required');\n            emailInput.current.focus();\n        }else if(password.length < 8) {\n            setErrorTxt('Password must be at least 8 characters long');\n            passwordInput.current.focus();\n        } else if (!password.match(/[0-9]/) || !password.match(/[\\W]/) || !password.match(/[\\W_]/)) {\n            setErrorTxt('Password must contain at least one number and one special character');\n            passwordInput.current.focus();\n        } else if (!confirmPassword) {\n            setErrorTxt('Confirm Password is required');\n            confirmPasswordInput.current.focus();\n        }else if (password !== confirmPassword) {\n            setErrorTxt('Passwords do not match');\n            confirmPasswordInput.current.focus();\n        }else if (!isValidEmail) {\n            setErrorTxt('Invalid email format');\n            emailInput.current.focus();\n        }\n        // else if (!isValidPassword) {\n        //     setErrorTxt('Password must be at least 8 characters long and contain at least one number and one special character');\n        // } \n        else {\n            const data={\n                firstname:firstName,\n                lastname:lastName,\n                mobilenumber:mobile,\n                email,\n                password,\n                username: email, // Assuming username is the same as email\n                createdBy: 'self', // Assuming createdBy is the same as email\n                role: 0, // Default role, can be changed as needed\n                status: false // Assuming 1 is for active status\n            }\n            dispatch(registerUser(data))\n                .then((response) => {\n                    if (response.error) {\n                        setErrorTxt(response.error.message);\n                    }else if(loading){\n                        setErrorTxt('Please Wait We Are Registering The user...');\n                    } else {\n                        setErrorTxt('Registration Successful');\n                        window.location.href = '/login'; // Redirect to login page after successful registration\n                    }\n                });\n        }\n    };\n    return (\n        <Box sx={{ width: '100%', height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: '#f5f5f5' }}>\n\n            <Card sx={{ width: '400px', padding: '20px' }}>\n                <img src={require('../../../assets/images/logo.png')} alt=\"Login\" style={{ width: '160px', height: '80px', display: 'block', margin: '0 auto 20px' }} />\n                \n                <Typography sx={{ textAlign: 'center' }} variant=\"h5\" component=\"h2\" gutterBottom>\n                    User Registration\n                </Typography>\n                <form>\n                    {/* firstname lastname mobile fields */}\n                    <TextField\n                        ref={firstNameInput}\n                        label=\"First Name\"\n                        color='error'\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type=\"text\"\n                        onChange={(e) => setFirstName(e.target.value)}\n                    />\n                    <TextField\n                        ref={lastNameInput}\n                        label=\"Last Name\"\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type=\"text\"\n                        onChange={(e) => setLastName(e.target.value)}\n                    />\n                    <TextField\n                        ref={mobileInput}\n                        label=\"Mobile\"\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type=\"text\"\n                        onChange={(e) => setMobile(e.target.value)}\n                    />\n                    <TextField\n                        ref={emailInput}\n                        label=\"Email\"\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type=\"email\"\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <TextField\n                        ref={passwordInput}\n                        label=\"Password\"\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type={eyeOpen ? 'text' : 'password'}\n                        onChange={(e) => setPassword(e.target.value)}\n                        InputProps={{\n                            endAdornment: (\n                                <Button onClick={() => setEyeOpen(!eyeOpen)} variant=\"text\">\n                                    {eyeOpen ? 'Hide' : 'Show'}\n                                </Button>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        ref={confirmPasswordInput}\n                        label=\"Confirm Password\"\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        type={eyeOpen ? 'text' : 'password'}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                        InputProps={{\n                            endAdornment: (\n                                <Button onClick={() => setEyeOpen(!eyeOpen)} variant=\"text\">\n                                    {eyeOpen ? 'Hide' : 'Show'}\n                                </Button>\n                            ),\n                        }}\n                    />\n                    {/* Submit button */}\n                    <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\" fullWidth type=\"submit\">\n                        Register\n                    </Button>\n                    {errorTxt && <Typography color=\"error\" variant=\"body2\" sx={{ textAlign: 'center', padding: '10px', textTransform: 'capitalize' }}>{errorTxt}</Typography>}\n\n                </form>\n\n                <p style={{ marginTop: '10px' }}>\n                    Already have an account? <a href=\"/login\">Login</a>\n                </p>\n            </Card>\n        </Box>\n    );\n} \nexport default Register;","export const formatDate = (date) => {\n  const options = {  day: 'numeric', month: 'long', year: 'numeric' };\n  return new Date(date).toLocaleDateString(undefined, options);\n}\nexport const formatTime = (time) => {\n  const options = { hour: '2-digit', minute: '2-digit', second: '2-digit' };\n  return new Date(time).toLocaleTimeString(undefined, options);\n}\nexport const formatDateTime = (dateTime) => {\n  const date = formatDate(dateTime);\n  const time = formatTime(dateTime);\n  return `${date} at ${time}`;\n}\n//date to ISO string\nexport const dateToISOString = (date) => {\n  return new Date(date).toISOString();\n}\n//ISO string to date\nexport const isoStringToDate = (isoString) => {\n  return new Date(isoString);\n}\n//date to UTC string\nexport const dateToUTCString = (date) => {\n  return new Date(date).toUTCString();\n}\n//UTC string to date\nexport const utcStringToDate = (utcString) => {\n  return new Date(utcString);\n}\nexport const formatNumber = (number) => {\n  return new Intl.NumberFormat().format(number);\n}\nexport const formatCurrency = (amount, currency = 'USD') => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency\n  }).format(amount);\n}\nexport const formatPercentage = (value) => {\n  return `${(value * 100).toFixed(2)}%`;\n}\nexport const formatDuration = (seconds) => {    \n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}m ${remainingSeconds}s`;\n}   \nexport const checkvalidEmail = (email) => {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(String(email).toLowerCase());\n}\nexport const checkvalidPhone = (phone) => {\n  const re = /^\\+?[1-9]\\d{1,14}$/; // E.164 format\n  return re.test(String(phone).toLowerCase());\n}\nexport const checkvalidPassword = (password) => {\n  // At least 8 characters, one uppercase, one lowercase, one number, and one special character\n  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n  return re.test(String(password));\n}\nexport const windowWidth = () => {\n  return  window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n}\n"],"names":["Register","email","setEmail","useState","password","setPassword","firstName","setFirstName","lastName","setLastName","mobile","setMobile","errorTxt","setErrorTxt","eyeOpen","setEyeOpen","confirmPassword","setConfirmPassword","firstNameInput","useRef","lastNameInput","mobileInput","emailInput","passwordInput","confirmPasswordInput","data","loading","error","useSelector","state","register","dispatch","useDispatch","_jsx","Box","sx","width","height","display","justifyContent","alignItems","backgroundColor","children","_jsxs","Card","padding","src","require","alt","style","margin","Typography","textAlign","variant","component","gutterBottom","TextField","ref","label","color","fullWidth","type","onChange","e","target","value","InputProps","endAdornment","Button","onClick","preventDefault","isValidEmail","checkvalidEmail","checkvalidPassword","current","focus","length","match","firstname","lastname","mobilenumber","username","createdBy","role","status","registerUser","then","response","message","window","location","href","textTransform","marginTop","test","String","toLowerCase","windowWidth","innerWidth","document","documentElement","clientWidth","body"],"sourceRoot":""}