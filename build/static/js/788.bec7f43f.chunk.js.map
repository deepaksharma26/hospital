{"version":3,"file":"static/js/788.bec7f43f.chunk.js","mappings":"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","sources":["app/billingCategory/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n    Box,\n    Paper,\n    Typography,\n    TextField,\n    Button,\n    Grid,\n    IconButton,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Snackbar,\n    Alert,\n    Switch\n} from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createBillingCategory, deleteBillingCategory, fetchBillingCategories, updateBillingCategory } from '../redux/billingCategorySlice';\nimport { updateBilling } from '../redux/billingSlice';\nimport { render } from '@testing-library/react';\n\nconst BillingCategory = () => {\n    const [categories, setCategories] = useState([]);\n    const [form, setForm] = useState({id:'', name: '', description: '' });\n    const [editId, setEditId] = useState(null);\n    const [openDialog, setOpenDialog] = useState(false);\n    const [deleteId, setDeleteId] = useState(null);\n    const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n    const dispatch = useDispatch();\n    const { billingCategory } = useSelector((state) => state.billingCategory);\n    // Fetch categories\n    useEffect(() => {\n        dispatch(fetchBillingCategories()).then(res => {\n            if (res.payload) {\n                setCategories(res.payload);\n            } else {\n                console.error('Failed to fetch categories:', res.error);\n            }\n        });\n    }, [dispatch]);\n\n\n    const handleChange = (e) => {\n        setForm({ ...form, [e.target.name]: e.target.value });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            if (editId) {\n                dispatch(updateBillingCategory(form)).then(() => { \n                    dispatch(fetchBillingCategories());\n                    setSnackbar({ open: true, message: 'Category updated!', severity: 'success' });\n                });\n            } else {\n                dispatch(createBillingCategory(form)).then(() => {\n                    dispatch(fetchBillingCategories());\n                    setSnackbar({ open: true, message: 'Category created!', severity: 'success' });\n                });\n            }\n            \n            setForm({ name: '', description: '' });\n            setEditId(null); \n        } catch (err) {\n            setSnackbar({ open: true, message: 'Operation failed', severity: 'error' });\n        }\n    };\n\n    const handleEdit = (category) => {\n        setForm({id: category._id, name: category.name, description: category.description });\n        setEditId(category._id);\n        window.scrollTo({ top: 0, behavior: 'smooth' }); \n    };\n\n    const handleDelete = async () => {\n        dispatch(deleteBillingCategory(deleteId)).then((res) => {\n            if (res.error) {\n                setSnackbar({ open: true, message: 'Failed to delete category', severity: 'error' });\n                return;\n            }\n            setSnackbar({ open: true, message: 'Category deleted!', severity: 'success' });\n            setDeleteId(null);\n            dispatch(fetchBillingCategories());\n        }).catch((err) => {         \n            setSnackbar({ open: true, message: 'Failed to delete category', severity: 'error' });\n        });\n    };\n\n    const handleStatusChange = (category) => {\n        const updatedCategory = { ...category, id: category?._id, isActive: !category.isActive };\n        dispatch(updateBillingCategory(updatedCategory)).then(() => {\n            dispatch(fetchBillingCategories());\n            setSnackbar({ open: true, message: `Category ${updatedCategory.isActive ? 'activated' : 'deactivated'}!`, severity: 'success' });\n        }).catch((err) => {\n            setSnackbar({ open: true, message: 'Failed to update status', severity: 'error' });\n        });\n    };\n    const columns = [\n        {\n            field: 'name', headerName:'Category Name', flex: 1, minWidth: 180\n        },\n        {\n            field: 'description', headerName:'Description', flex: 2, minWidth: 220\n        },\n        {\n            field: 'isActive', headerName: 'Status', flex: 2, minWidth: 220,\n            renderCell: (params) => (\n                <Switch\n                    checked={params.row.isActive}\n                    // onChange={() => handleStatusChange(params.row)}\n                    color={params.row.isActive ? 'success' : 'error'}\n                />\n            )\n        },\n        {\n            field: 'actions',\n            headerName: 'Actions',\n            width: 140,\n            sortable: false,\n            renderCell: (params) => (\n                <>\n                    <IconButton color=\"primary\" onClick={() => handleEdit(params.row)}>\n                        <EditIcon />\n                    </IconButton>\n                    <IconButton color=\"error\" onClick={() => setDeleteId(params.row._id)}>\n                        <DeleteIcon />\n                    </IconButton>\n                </>\n            ),\n        },\n    ];\n\n    return (\n        <>\n            <Box sx={{ display: 'flex', border: '1px solid #ccc', backgroundColor: '#f5f5f5', padding: '10px' }}>\n                <Typography variant=\"h5\" color=\"textSecondary\">\n                   Manage Billings Categories\n                </Typography>\n                <Button variant=\"contained\" color=\"primary\" sx={{ marginLeft: 'auto' }} onClick={() => dispatch(fetchBillingCategories({}))}>\n                    Refresh\n                </Button>\n                {/* <Button variant=\"contained\" color=\"secondary\" sx={{ marginLeft: '10px' }} onClick={() => window.location.href = routesName.BILLING}>\n                            Add New Billing\n                        </Button> */}\n                {/* <Button variant=\"contained\" color=\"success\" sx={{ marginLeft: '10px' }} onClick={() => exportBillings()}>\n                            Export Billings\n                        </Button> */}\n            </Box>\n\n            <Box sx={{ maxWidth: 900, mx: 'auto', p: { xs: 1, sm: 2 } }}>\n\n                <Paper\n                    sx={{\n                        p: 3,\n                        mb: 4,\n                        background: 'linear-gradient(90deg, #43cea2 0%, #185a9d 100%)',\n                        color: '#fff',\n                        borderRadius: 3,\n                        boxShadow: 4,\n                    }}\n                >\n                    <Typography variant=\"h5\" fontWeight=\"bold\" gutterBottom>\n                        {editId ? 'Update Billing Category' : 'Create Billing Category'}\n                    </Typography>\n                    <form onSubmit={handleSubmit}>\n                        <Grid container spacing={2} alignItems=\"center\">\n                            <Grid item xs={12} sm={5}>\n                                <TextField\n                                    label=\"Category Name\"\n                                    name=\"name\"\n                                    value={form.name}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    required\n                                    variant=\"filled\"\n                                    sx={{\n                                        background: 'rgba(255,255,255,0.15)',\n                                        borderRadius: 1,\n                                        input: { color: '#fff', fontWeight: 600 },\n                                        label: { color: '#fff' }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={5}>\n                                <TextField\n                                    label=\"Description\"\n                                    name=\"description\"\n                                    value={form.description}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    variant=\"filled\"\n                                    sx={{\n                                        background: 'rgba(255,255,255,0.15)',\n                                        borderRadius: 1,\n                                        input: { color: '#fff' },\n                                        label: { color: '#fff' }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={2}>\n                                <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color={editId ? \"warning\" : \"secondary\"}\n                                    startIcon={<AddCircleIcon />}\n                                    fullWidth\n                                    sx={{\n                                        height: 56,\n                                        fontWeight: 700,\n                                        fontSize: 16,\n                                        background: editId\n                                            ? 'linear-gradient(90deg, #f7971e 0%, #ffd200 100%)'\n                                            : 'linear-gradient(90deg, #ff9966 0%, #ff5e62 100%)',\n                                        color: '#fff',\n                                        boxShadow: 2,\n                                        '&:hover': {\n                                            background: editId\n                                                ? 'linear-gradient(90deg, #ffd200 0%, #f7971e 100%)'\n                                                : 'linear-gradient(90deg, #ff5e62 0%, #ff9966 100%)',\n                                        },\n                                    }}\n                                >\n                                    {editId ? 'Update' : 'Create'}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Paper>\n\n                <Paper sx={{ p: 2, borderRadius: 3, boxShadow: 2 }}>\n                    <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ mb: 2 }}>\n                        Billing Categories\n                    </Typography>\n                    <div style={{ width: '100%', minHeight: 350 }}>\n                        <DataGrid\n                            rows={billingCategory}\n                            columns={columns}\n                            getRowId={(row) => row._id}\n                            pageSize={7}\n                            rowsPerPageOptions={[7, 15, 30]}\n                            autoHeight\n                            disableSelectionOnClick\n                            sx={{\n                                background: 'rgba(255,255,255,0.97)',\n                                borderRadius: 2,\n                                '& .MuiDataGrid-columnHeaders': {\n                                    background: 'linear-gradient(90deg, #43cea2 0%, #185a9d 100%)',\n                                    // color: '#fff',\n                                    fontWeight: 700,\n                                    fontSize: 16,\n                                },\n                                '& .MuiDataGrid-row:hover': {\n                                    background: 'rgba(67,206,162,0.08)',\n                                },\n                                '& .MuiDataGrid-cell': {\n                                    fontSize: 15,\n                                },\n                            }}\n                        />\n                    </div>\n                </Paper>\n\n                {/* Delete Confirmation Dialog */}\n                <Dialog open={!!deleteId} onClose={() => setDeleteId(null)}>\n                    <DialogTitle>Delete Category?</DialogTitle>\n                    <DialogContent>\n                        Are you sure you want to delete this billing category? This action cannot be undone.\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => setDeleteId(null)} color=\"primary\">Cancel</Button>\n                        <Button onClick={handleDelete} color=\"error\" variant=\"contained\">Delete</Button>\n                    </DialogActions>\n                </Dialog>\n\n                {/* Snackbar for feedback */}\n                <Snackbar\n                    open={snackbar.open}\n                    autoHideDuration={3000}\n                    onClose={() => setSnackbar({ ...snackbar, open: false })}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                >\n                    <Alert severity={snackbar.severity} sx={{ width: '100%' }}>\n                        {snackbar.message}\n                    </Alert>\n                </Snackbar>\n            </Box>\n        </>\n    );\n};\n\nexport default BillingCategory"],"names":["BillingCategory","categories","setCategories","useState","form","setForm","id","name","description","editId","setEditId","openDialog","setOpenDialog","deleteId","setDeleteId","snackbar","setSnackbar","open","message","severity","dispatch","useDispatch","billingCategory","useSelector","state","useEffect","fetchBillingCategories","then","res","payload","console","error","handleChange","e","target","value","columns","field","headerName","flex","minWidth","renderCell","params","_jsx","Switch","checked","row","isActive","color","width","sortable","_jsxs","_Fragment","children","IconButton","onClick","handleEdit","category","_id","window","scrollTo","top","behavior","EditIcon","DeleteIcon","Box","sx","display","border","backgroundColor","padding","Typography","variant","Button","marginLeft","maxWidth","mx","p","xs","sm","Paper","mb","background","borderRadius","boxShadow","fontWeight","gutterBottom","onSubmit","async","preventDefault","updateBillingCategory","createBillingCategory","err","Grid","container","spacing","alignItems","item","TextField","label","onChange","fullWidth","required","input","type","startIcon","AddCircleIcon","height","fontSize","style","minHeight","DataGrid","rows","getRowId","pageSize","rowsPerPageOptions","autoHeight","disableSelectionOnClick","Dialog","onClose","DialogTitle","DialogContent","DialogActions","deleteBillingCategory","catch","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert"],"sourceRoot":""}