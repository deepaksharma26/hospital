{"version":3,"file":"static/js/34.bd6237ba.chunk.js","mappings":"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","sources":["components/loader.jsx","app/user/index.jsx","utills/index.js"],"sourcesContent":["import { Box, CircularProgress, Modal } from \"@mui/material\"\n\nexport const Loader = ({open, handleClose}) => {\n    return (\n        <Modal open={open} onClose={handleClose}>\n            <Box sx={{\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                bgcolor: 'background.paper',\n                p: 4,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n            }}>\n                <CircularProgress />\n                <p style={{ marginTop: '16px' }}>Loading data...</p>\n            </Box>\n        </Modal>\n    )\n}","import { Box, Button, Chip, CircularProgress, Grid, Modal, Paper, Typography } from \"@mui/material\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchUsersList } from \"../redux/userListSlice\";\nimport { DataGrid } from '@mui/x-data-grid';\nimport { fetchUserRoles } from \"../redux/userRoleSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport { windowWidth } from \"../../utills\";\nimport { updateUser } from \"../redux/updateUserSlice\";\nimport { Loader } from \"../../components/loader\";\n\n\nconst ListAllUsers = () => {\n    const screenWidth = windowWidth()\n    const userRoles = useSelector((state) => state.userRole.roles);\n    const userList = useSelector((state) => state.userList.data);\n    const { loading, error } = useSelector((state) => state.updateUser);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n     const [open, setOpen] = React.useState(false);\n\n      const handleOpen = () => setOpen(true);\n      const handleClose = () => setOpen(false);\n    useEffect(() => {\n        dispatch(fetchUsersList({})).then(res => {\n            if (res?.payload) {\n                dispatch(fetchUserRoles({})); // Dispatch again to ensure data is updated in the store\n            } else {\n                console.error('Failed to fetch users:', res.error);\n            }\n        }); // Fetch users data with empty object or any required parameters\n    }, []);\n    const modifyUser = (e) => {\n        const userId = e.row._id;\n        const userData = safeRows.find(userList => userList._id === userId);\n        if (userData) {\n            console.log('User data to modify:', userData);\n            // Here you can implement the logic to modify the user data\n            // For example, you can navigate to a user modification page or open a modal\n            navigate(`/modify-user/${userId}`, { state: { user: userData, role: userRoles } });\n        } else {\n            console.error('User not found for modification:', userId);\n        }\n    }\n    const markActive = (e) => {\n         setOpen(true);\n        const userId = e.row._id;\n         const userData = safeRows.find(userList => userList._id === userId);\n        if (userId) {\n            const data = {\n                firstname: userData.firstname,\n                lastname: userData.lastname,\n                mobilenumber: userData.mobilenumber,\n                email: userData.email,\n                role: userData.role, // Default role, can be changed as needed\n                status: userData.status == 1 ? 0 : 1  // Assuming 1 is for active status\n            }\n\n            dispatch(updateUser(userId, data))\n                .then((response) => {\n                    if (response.error) {\n                        // setErrorTxt(response.error.message);\n                    } else if (loading) {\n                       \n                        // setErrorTxt('Please Wait We Are Registering The user...');\n                    } else { \n                        // setErrorTxt('User Updation Successful');\n                        dispatch(fetchUsersList({})).then(() => {\n                            setOpen(false);\n                        }); // Refresh the user list after successful update\n                        // window.location.href = routesName.LIST_ALL_USERS; // Redirect to login page after successful registration\n                    }\n                });\n            \n        } else {\n            console.error('User not found for marking active:', userId);\n        }\n    }\n    const columns = [\n        { field: 'id', headerName: 'ID', width: 90 },\n        { field: 'firstname', headerName: 'First Name', width: 150 },\n        { field: 'lastname', headerName: 'Last Name', width: 150 },\n        { field: 'email', headerName: 'Email', width: 300 },\n        { field: 'role', headerName: 'Role', width: 150 },\n        {\n            field: 'status', renderCell: (params) =>\n            (\n                <Chip sx={{ width: 80 }} label={params.value} color={params.value == 'Active' ? 'success' : 'error'} />\n            ), headerName: 'Status', width: 120\n        },\n        {\n            field: '',\n            renderCell: (e) => (\n                <>\n                    <Button label=\"Modify\" variant=\"outlined\" color=\"warning\" onClick={() => modifyUser(e)} >Modify</Button>\n                    <Button label=\"Modify\" variant=\"outlined\" color={e.row?.status == 'Active' ? 'success' : 'error'} onClick={() => markActive(e)} sx={{ marginLeft: 1 }}>{e.row?.status == 'Active' ? 'InActive' : 'Activate'}</Button>\n                </>\n            ),\n            headerName: 'Modify', width: 280\n        },\n    ];\n    const paginationModel = { pageSize: 5, page: 0 };\n\n    const safeRows = userList.map((row, idx) => ({\n        ...row,\n        id: row.id ?? idx + 1, // Use existing id or fallback to index\n        role: row?.role?.rolename ? row?.role?.rolename : 'Unknown', // Map role ID to role name\n        status: row.status == 1 ? 'Active' : 'Inactive', // Map boolean status to string\n    }));\n\n    //export user Data to exvcel or csv\n    const exportUsers = () => {\n        const csvContent = \"data:text/csv;charset=utf-8,\" +\n            columns.map(col => col.headerName).join(\",\") + \"\\n\" +\n            safeRows.map(row => columns.map(col => row[col.field]).join(\",\")).join(\"\\n\");\n        const encodedUri = encodeURI(csvContent);\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"users.csv\");\n        document.body.appendChild(link); // Required for FF\n        link.click();\n        document.body.removeChild(link); // Clean up\n    };\n    // Function to handle user modification\n\n    return (\n        <Box sx={{ width: '100%' }}>\n            <Box sx={{ display: 'flex', border: '1px solid #ccc', backgroundColor: '#f5f5f5', padding: '10px', marginBottom: '20px' }}>\n                <Typography variant=\"h5\" color=\"textSecondary\">\n                    List of All Users\n                </Typography>\n                <Button variant=\"contained\" color=\"primary\" sx={{ marginLeft: 'auto' }} onClick={() => dispatch(fetchUsersList({}))}>\n                    Refresh\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" sx={{ marginLeft: '10px' }} onClick={() => window.location.href = '/add-user'}>\n                    Add User\n                </Button>\n                <Button variant=\"contained\" color=\"success\" sx={{ marginLeft: '10px' }} onClick={() => exportUsers()}>\n                    Export Users\n                </Button>\n            </Box>\n            <Grid item xs={12} sx={{ justifyContent: 'center', display: 'flex', marginTop: '20px' }}>\n                <Paper sx={{ width: '100%' }}>\n                    <DataGrid\n                        rows={safeRows}\n                        columns={columns}\n                        initialState={{ pagination: { paginationModel } }}\n                        pageSizeOptions={[5, 10]}\n                        sx={{ border: 0, width: '100%' }}\n                    />\n                </Paper>\n            </Grid>\n\n           <Loader open={open}/>\n        </Box>\n    );\n}\nexport default ListAllUsers;","export const formatDate = (date) => {\n  const options = {  day: 'numeric', month: 'long', year: 'numeric' };\n  return new Date(date).toLocaleDateString(undefined, options);\n}\nexport const formatTime = (time) => {\n  const options = { hour: '2-digit', minute: '2-digit', second: '2-digit' };\n  return new Date(time).toLocaleTimeString(undefined, options);\n}\nexport const formatDateTime = (dateTime) => {\n  const date = formatDate(dateTime);\n  const time = formatTime(dateTime);\n  return `${date} at ${time}`;\n}\nexport const formatNumber = (number) => {\n  return new Intl.NumberFormat().format(number);\n}\nexport const formatCurrency = (amount, currency = 'USD') => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency\n  }).format(amount);\n}\nexport const formatPercentage = (value) => {\n  return `${(value * 100).toFixed(2)}%`;\n}\nexport const formatDuration = (seconds) => {    \n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}m ${remainingSeconds}s`;\n}   \nexport const checkvalidEmail = (email) => {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(String(email).toLowerCase());\n}\nexport const checkvalidPhone = (phone) => {\n  const re = /^\\+?[1-9]\\d{1,14}$/; // E.164 format\n  return re.test(String(phone).toLowerCase());\n}\nexport const checkvalidPassword = (password) => {\n  // At least 8 characters, one uppercase, one lowercase, one number, and one special character\n  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n  return re.test(String(password));\n}\nexport const windowWidth = () => {\n  return  window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n}\n"],"names":["Loader","_ref","open","handleClose","_jsx","Modal","onClose","children","_jsxs","Box","sx","position","top","left","transform","bgcolor","p","display","flexDirection","alignItems","justifyContent","CircularProgress","style","marginTop","ListAllUsers","windowWidth","userRoles","useSelector","state","userRole","roles","userList","data","loading","error","updateUser","dispatch","useDispatch","navigate","useNavigate","setOpen","React","useEffect","fetchUsersList","then","res","payload","fetchUserRoles","console","columns","field","headerName","width","renderCell","params","Chip","label","value","color","e","_e$row","_e$row2","_Fragment","Button","variant","onClick","userId","row","_id","userData","safeRows","find","log","user","role","modifyUser","status","firstname","lastname","mobilenumber","email","response","markActive","marginLeft","map","idx","_row$id","_row$role","_row$role2","id","rolename","border","backgroundColor","padding","marginBottom","Typography","window","location","href","exportUsers","csvContent","col","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","removeChild","Grid","item","xs","Paper","DataGrid","rows","initialState","pagination","paginationModel","pageSize","page","pageSizeOptions","formatDate","date","Date","toLocaleDateString","undefined","day","month","year","checkvalidEmail","test","String","toLowerCase","checkvalidPassword","password","innerWidth","documentElement","clientWidth"],"sourceRoot":""}