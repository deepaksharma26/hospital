{"version":3,"file":"static/js/997.f73ed982.chunk.js","mappings":"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","sources":["app/auth/login/index.js","utills/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Box, Card, Typography, TextField, Button, CircularProgress } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport { checkvalidEmail, checkvalidPassword } from '../../../utills';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchUsers } from './../../../app/redux/userSlice';\nconst Login = () => {    \n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [errorTxt, setErrorTxt] = useState('');\n    const [eyeOpen, setEyeOpen] = useState(false);\n    const dispatch = useDispatch();\n    const { data, loading, error } = useSelector((state) => state.users);\n    const emailInput = useRef(null);\n    const passwordInput = useRef(null);\n  useEffect(() => {\n    \n  }, [dispatch]);\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // Handle login logic here\n        const isValidEmail = checkvalidEmail(email);\n        const isValidPassword = checkvalidPassword(password);\n        if(!isValidEmail) { \n            emailInput.current.focus();\n            setErrorTxt(isValidEmail ? '' : 'Invalid email format'); \n        }\n        // else if(!isValidPassword){\n        //     passwordInput.current.focus();\n        //     setErrorTxt(!isValidPassword ? '' : 'Password must be at least 8 characters long and contain at least one number and one special character');\n        // } \n        else { \n            dispatch(fetchUsers({username: email, password: password})).then((res) => {\n                if (error) {\n                    setErrorTxt('Invalid Email or Password');\n                     emailInput.current.focus();\n                  }if(loading){\n                     setErrorTxt('Please Wait We Are Validating The user...');\n                  }else if(res.payload) {\n                     setErrorTxt('Login Successful',data); \n                     window.location.href = '#/dashboard'; // Example redirect\n                  } else {\n                     setErrorTxt('Invalid Email or Password');\n                     emailInput.current.focus();\n                  } \n            });\n            // Simulate a successful login \n            \n        }\n    };\n    return (\n       <Box sx={{ width: '100%', height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: '#f5f5f5' }}>\n          <Card sx={{ width: '400px', padding: '20px' }}>\n             <img src={require('../../../assets/images/logo.png')} alt=\"Login\" style={{ width: '160px', height: '80px', display: 'block', margin: '0 auto 20px' }} />\n             <Typography sx={{textAlign:'center'}} variant=\"h5\" component=\"h2\" gutterBottom>\n                User Login\n             </Typography>\n             <form>\n                <TextField\n                   ref={emailInput}\n                   label=\"Email\"\n                   variant=\"outlined\"\n                   fullWidth\n                   margin=\"normal\"\n                   type=\"email\"\n                   onChange={(e) => setEmail(e.target.value)}\n                />\n                <TextField\n                   ref={passwordInput}\n                   label=\"Password\"\n                   variant=\"outlined\"\n                   fullWidth\n                   margin=\"normal\"\n                   type={eyeOpen ? 'text' : 'password'}\n                   onChange={(e) => setPassword(e.target.value)}\n                    InputProps={{\n                         endAdornment: (\n                             <Button onClick={() => setEyeOpen(!eyeOpen)} variant=\"text\">\n                             {eyeOpen ? 'Hide' : 'Show'}\n                             </Button>\n                         ),\n                     }}\n                />\n                <Typography variant=\"body2\" sx={{ marginTop: '10px', textAlign: 'left', marginBottom: '10px' }}>\n                   Forgot your password? <Link to=\"/change-password\">Change Password</Link>\n                </Typography>\n                <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\" fullWidth type=\"submit\">\n                   Login\n                </Button>\n                <Box sx={{ display: 'flex', justifyContent: 'center', marginTop: '10px', background: 'aliceblue' }}>\n                  {loading &&  <CircularProgress color=\"primary\" size={28} /> }\n                  {errorTxt && <Typography color={loading ? 'warning' : data ? 'success' : 'error'} variant=\"body2\" sx={{textAlign:'center', padding:'10px', textTransform:'capitalize'}}>{errorTxt}</Typography>}\n                </Box>\n             </form>\n          \n          <Typography variant=\"body2\" sx={{ marginTop: '10px' }}>\n             Don't have an account? <Link to=\"/register\">Register</Link>\n          </Typography>\n          </Card> \n       </Box>\n    );\n}\nexport default Login;","export const formatDate = (date) => {\n  const options = {  day: 'numeric', month: 'long', year: 'numeric' };\n  return new Date(date).toLocaleDateString(undefined, options);\n}\nexport const formatTime = (time) => {\n  const options = { hour: '2-digit', minute: '2-digit', second: '2-digit' };\n  return new Date(time).toLocaleTimeString(undefined, options);\n}\nexport const formatDateTime = (dateTime) => {\n  const date = formatDate(dateTime);\n  const time = formatTime(dateTime);\n  return `${date} at ${time}`;\n}\n//date to ISO string\nexport const dateToISOString = (date) => {\n  return new Date(date).toISOString();\n}\n//ISO string to date\nexport const isoStringToDate = (isoString) => {\n  return new Date(isoString);\n}\n//date to UTC string\nexport const dateToUTCString = (date) => {\n  return new Date(date).toUTCString();\n}\n//UTC string to date\nexport const utcStringToDate = (utcString) => {\n  return new Date(utcString);\n}\nexport const formatNumber = (number) => {\n  return new Intl.NumberFormat().format(number);\n}\nexport const formatCurrency = (amount, currency = 'USD') => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency\n  }).format(amount);\n}\nexport const formatPercentage = (value) => {\n  return `${(value * 100).toFixed(2)}%`;\n}\nexport const formatDuration = (seconds) => {    \n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}m ${remainingSeconds}s`;\n}   \nexport const checkvalidEmail = (email) => {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(String(email).toLowerCase());\n}\nexport const checkvalidPhone = (phone) => {\n  const re = /^\\+?[1-9]\\d{1,14}$/; // E.164 format\n  return re.test(String(phone).toLowerCase());\n}\nexport const checkvalidPassword = (password) => {\n  // At least 8 characters, one uppercase, one lowercase, one number, and one special character\n  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n  return re.test(String(password));\n}\nexport const windowWidth = () => {\n  return  window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n}\n"],"names":["Login","email","setEmail","useState","password","setPassword","errorTxt","setErrorTxt","eyeOpen","setEyeOpen","dispatch","useDispatch","data","loading","error","useSelector","state","users","emailInput","useRef","passwordInput","useEffect","_jsx","Box","sx","width","height","display","justifyContent","alignItems","backgroundColor","children","_jsxs","Card","padding","src","require","alt","style","margin","Typography","textAlign","variant","component","gutterBottom","TextField","ref","label","fullWidth","type","onChange","e","target","value","InputProps","endAdornment","Button","onClick","marginTop","marginBottom","Link","to","preventDefault","isValidEmail","checkvalidEmail","checkvalidPassword","fetchUsers","username","then","res","current","focus","payload","window","location","href","color","background","CircularProgress","size","textTransform","test","String","toLowerCase","windowWidth","innerWidth","document","documentElement","clientWidth","body"],"sourceRoot":""}