{"version":3,"file":"static/js/34.a17528c8.chunk.js","mappings":"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","sources":["components/loader.jsx","app/user/index.jsx"],"sourcesContent":["import { Box, CircularProgress, Modal } from \"@mui/material\"\n\nexport const Loader = ({open, handleClose}) => {\n    return (\n        <Modal open={open} onClose={handleClose}>\n            <Box sx={{\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                bgcolor: 'background.paper',\n                p: 4,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n            }}>\n                <CircularProgress />\n                <p style={{ marginTop: '16px' }}>Loading data...</p>\n            </Box>\n        </Modal>\n    )\n}","import { Box, Button, Chip, Grid, Paper, Typography, TextField, FormControl, InputLabel, Select, MenuItem, Dialog, DialogTitle, DialogContent, DialogActions, Snackbar, Alert } from \"@mui/material\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchUsersList } from \"../redux/userListSlice\";\nimport { DataGrid } from '@mui/x-data-grid';\nimport { fetchUserRoles } from \"../redux/userRoleSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Loader } from \"../../components/loader\";\nimport { updateUser, addUser } from \"../redux/updateUserSlice\";\nimport EditIcon from '@mui/icons-material/Edit';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\n\nconst UserFormDialog = ({\n    open, handleClose, handleSubmit, form, setForm, roles, isEdit\n}) => (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"sm\" fullWidth>\n        <DialogTitle sx={{ background: 'linear-gradient(90deg, #43cea2 0%, #185a9d 100%)', color: '#fff' }}>\n            {isEdit ? \"Update Existing User\" : \"Add New User\"}\n        </DialogTitle>\n        <DialogContent sx={{ py: 3 }}>\n            <Grid container spacing={2} sx={{ width: '100%', mt: 2 }}>\n                <Grid item xs={12} sm={6}>\n                    <TextField\n                        label=\"First Name\"\n                        name=\"firstname\"\n                        value={form.firstname}\n                        onChange={e => setForm({ ...form, firstname: e.target.value })}\n                        fullWidth\n                        required\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField\n                        label=\"Last Name\"\n                        name=\"lastname\"\n                        value={form.lastname}\n                        onChange={e => setForm({ ...form, lastname: e.target.value })}\n                        fullWidth\n                        required\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField\n                        label=\"Email\"\n                        name=\"email\"\n                        value={form.email}\n                        onChange={e => setForm({ ...form, email: e.target.value })}\n                        fullWidth\n                        required\n                        variant=\"outlined\"\n                        type=\"email\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField\n                        label=\"Mobile\"\n                        name=\"mobilenumber\"\n                        value={form.mobilenumber}\n                        onChange={e => setForm({ ...form, mobilenumber: e.target.value })}\n                        fullWidth\n                        required\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                {!isEdit && (\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            label=\"Password\"\n                            name=\"password\"\n                            value={form.password}\n                            onChange={e => setForm({ ...form, password: e.target.value })}\n                            fullWidth\n                            required\n                            variant=\"outlined\"\n                            type=\"password\"\n                        />\n                        \n                    </Grid>\n                )}\n                <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"role-label\">Role</InputLabel>\n                        <Select\n                            labelId=\"role-label\"\n                            label=\"Role\"\n                            value={form.role}\n                            onChange={e => setForm({ ...form, role: e.target.value })}\n                            required\n                            sx={{ width: '150px' }}\n                        >\n                            <MenuItem value=\"\">Select Role</MenuItem>\n                            {roles && roles.map((role) => (\n                                <MenuItem key={role._id} value={role._id}>\n                                    {role.rolename}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"status-label\">Status</InputLabel>\n                        <Select\n                            labelId=\"status-label\"\n                            label=\"Status\"\n                            value={form.status}\n                            onChange={e => setForm({ ...form, status: e.target.value })}\n                            required\n                            sx={{ width: '150px' }}\n                        >\n                            <MenuItem value={1}>Active</MenuItem>\n                            <MenuItem value={9}>Inactive</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n            </Grid>\n        </DialogContent>\n        <DialogActions sx={{ px: 3, pb: 2 }}>\n            <Button onClick={handleClose} color=\"secondary\" variant=\"outlined\">Cancel</Button>\n            <Button\n                onClick={handleSubmit}\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={isEdit ? <EditIcon /> : <AddCircleIcon />}\n                sx={{\n                    fontWeight: 700,\n                    background: isEdit\n                        ? 'linear-gradient(90deg, #f7971e 0%, #ffd200 100%)'\n                        : 'linear-gradient(90deg, #43cea2 0%, #185a9d 100%)',\n                    color: '#fff',\n                    boxShadow: 2,\n                    '&:hover': {\n                        background: isEdit\n                            ? 'linear-gradient(90deg, #ffd200 0%, #f7971e 100%)'\n                            : 'linear-gradient(90deg, #185a9d 0%, #43cea2 100%)',\n                    },\n                }}\n            >\n                {isEdit ? \"Update\" : \"Add\"}\n            </Button>\n        </DialogActions>\n    </Dialog>\n);\n\nconst ListAllUsers = () => {\n    const { roles } = useSelector((state) => state.userRole);\n    const userList = useSelector((state) => state.userList.data);\n    const { loading } = useSelector((state) => state.updateUser);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [open, setOpen] = useState(false);\n    const [formDialogOpen, setFormDialogOpen] = useState(false);\n    const [form, setForm] = useState({\n        firstname: '',\n        lastname: '',\n        email: '',\n        mobilenumber: '',\n        password: '',\n        role: '',\n        status: 1\n    });\n    const [isEdit, setIsEdit] = useState(false);\n    const [editUserId, setEditUserId] = useState(null);\n    const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n\n    useEffect(() => {\n        dispatch(fetchUsersList({}));\n        dispatch(fetchUserRoles({}));\n    }, [dispatch]);\n\n    const handleOpenForm = () => {\n        setForm({\n            firstname: '',\n            lastname: '',\n            email: '',\n            mobilenumber: '',\n            password: '',\n            role: '',\n            status: 1\n        });\n        setIsEdit(false);\n        setEditUserId(null);\n        setFormDialogOpen(true);\n    };\n\n    const handleEditUser = (user) => {\n        setForm({\n            id: user._id,\n            role:\n                roles.find((role) => role._id === user.role)?._id ||\n                user.role || '', // Use role ID if available, otherwise fallback to role name \n           \n            firstname: user.firstname,\n            lastname: user.lastname,\n            email: user.email,\n            mobilenumber: user.mobilenumber,\n            password: '', \n            status: user.status === 'Active' || user.status === 1 ? 1 : 9\n        });\n        setIsEdit(true);\n        setEditUserId(user._id);\n        setFormDialogOpen(true);\n    };\n\n    const handleFormSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            if (isEdit) { \n                dispatch(updateUser(form)).then((res) => {\n                    if (res.error) {\n                        setSnackbar({ open: true, message: 'Update failed', severity: 'error' });\n                        return;\n                    }\n                    dispatch(fetchUsersList({}));\n                    setForm({\n                        firstname: '',\n                        lastname: '',\n                        email: '',\n                        mobilenumber: '',           \n                        password: '',\n                        role: '',\n                        status: 1\n                    }); \n                    setSnackbar({ open: true, message: 'User updated successfully!', severity: 'success' });\n                    setIsEdit(false);\n                    setEditUserId(null);    \n                }); \n\n            }else {\n                dispatch(addUser(form)).then((res) => {\n                    if (res.error) {\n                        setSnackbar({ open: true, message: 'User addition failed', severity: 'error' });\n                        return ;\n                    }\n                    dispatch(fetchUsersList({}));\n                    setForm({\n                        firstname: '',\n                        lastname: '',\n                        email: '',          \n                        mobilenumber: '',\n                        password: '',\n                        role: '',\n                        status: 1\n                    });\n                    setSnackbar({ open: true, message: 'User added successfully!', severity: 'success' });\n                }); \n            }\n             \n            setFormDialogOpen(false); \n        } catch {\n            setSnackbar({ open: true, message: 'Operation failed', severity: 'error' });\n        }\n    };\n\n    const handleCloseSnackbar = () => setSnackbar({ ...snackbar, open: false });\n\n    const columns = [\n        { field: 'id', headerName: 'ID', width: 40 },\n        { field: 'firstname', headerName: 'First Name', width: 150 },\n        { field: 'lastname', headerName: 'Last Name', width: 150 },\n        { field: 'email', headerName: 'Email', width: 150 },\n        { field: 'mobilenumber', headerName: 'Mobile', width: 140 },\n        { field: 'role', headerName: 'Role', width: 100, \n            // valueGetter: (params) => params.row.role?.rolename || params.row.role || 'Unknown' \n        },\n        {\n            field: 'status', renderCell: (params) =>\n            (\n                <Chip sx={{ width: 80 }} label={params.value} color={params.value == 'Active' ? 'success' : 'error'} />\n            ), headerName: 'Status', width: 120\n        },\n        {\n            field: '',\n            renderCell: (e) => (\n                <>\n                    <Button label=\"Modify\" variant=\"outlined\" color=\"warning\" onClick={() => handleEditUser(e.row)} >Modify</Button>\n                    <Button label=\"Modify\" variant=\"outlined\" color={e.row?.status == 'Active' ? 'success' : 'error'} onClick={() => markActive(e)} sx={{ marginLeft: 1 }}>{e.row?.status == 'Active' ? 'InActive' : 'Activate'}</Button>\n                </>\n            ),\n            headerName: 'Modify', width:230\n        },\n    ];\n    const paginationModel = { pageSize: 5, page: 0 };\n\n    const safeRows = userList.map((row, idx) => ({\n        ...row,\n        id: row.id ?? idx + 1, // Use existing id or fallback to index\n        role: row?.role?.rolename ? row?.role?.rolename : 'Unknown', // Map role ID to role name\n        status: row.status == 1 ? 'Active' : 'Inactive', // Map boolean status to string\n    }));\n\n    //export user Data to exvcel or csv\n    const exportUsers = () => {\n        const csvContent = \"data:text/csv;charset=utf-8,\" +\n            columns.map(col => col.headerName).join(\",\") + \"\\n\" +\n            safeRows.map(row => columns.map(col => row[col.field]).join(\",\")).join(\"\\n\");\n        const encodedUri = encodeURI(csvContent);\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"users.csv\");\n        document.body.appendChild(link); // Required for FF\n        link.click();\n        document.body.removeChild(link); // Clean up\n    };\n    // Function to handle user modification\n    const markActive = (e) => { \n        const user = e.row;\n        const newStatus = user.status === 'Active' ? 9 : 1;\n        const data = {\n            id: user._id, // Use _id if id is not available\n            firstname: user.firstname,\n            lastname: user.lastname,\n            email: user.email,\n            mobilenumber: user.mobilenumber,\n            role: roles.find(role => role.rolename == user.role)?._id,\n            status: newStatus\n        }; \n        dispatch(updateUser(data)).then(() => {\n            dispatch(fetchUsersList({}));\n            setSnackbar({ open: true, message: `User ${newStatus === 1 ? 'activated' : 'deactivated'} successfully!`, severity: 'success' });\n        });\n    };\n\n    return (\n        <Box sx={{ width: '100%', background: '#f8fafc', minHeight: '100vh' }}>\n            {/* Heading and Actions */}\n            <Paper\n                elevation={3}\n                sx={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    flexWrap: 'wrap',\n                    p: { xs: 2, sm: 3 },\n                    mb: 3,\n                    borderRadius: 3,\n                    background: 'linear-gradient(90deg, #43cea2 0%, #185a9d 100%)',\n                    color: '#fff',\n                    boxShadow: 4,\n                }}\n            >\n                <Typography variant=\"h5\" fontWeight=\"bold\" sx={{ letterSpacing: 1 }}>\n                    👤 List of All Users\n                </Typography>\n                <Box sx={{ display: 'flex', gap: 2, mt: { xs: 2, sm: 0 } }}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => dispatch(fetchUsersList({}))}\n                        sx={{\n                            fontWeight: 700,\n                            background: 'linear-gradient(90deg, #11998e 0%, #38ef7d 100%)',\n                            color: '#fff',\n                            boxShadow: 2,\n                            '&:hover': {\n                                background: 'linear-gradient(90deg, #38ef7d 0%, #11998e 100%)',\n                            },\n                        }}\n                    >\n                        Refresh\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={handleOpenForm}\n                        sx={{\n                            fontWeight: 700,\n                            background: 'linear-gradient(90deg, #f7971e 0%, #ffd200 100%)',\n                            color: '#fff',\n                            boxShadow: 2,\n                            '&:hover': {\n                                background: 'linear-gradient(90deg, #ffd200 0%, #f7971e 100%)',\n                            },\n                        }}\n                    >\n                        Add User\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"success\"\n                        onClick={exportUsers}\n                        sx={{\n                            fontWeight: 700,\n                            background: 'linear-gradient(90deg, #43cea2 0%, #185a9d 100%)',\n                            color: '#fff',\n                            boxShadow: 2,\n                            '&:hover': {\n                                background: 'linear-gradient(90deg, #185a9d 0%, #43cea2 100%)',\n                            },\n                        }}\n                    >\n                        Export Users\n                    </Button>\n                </Box>\n            </Paper>\n\n            {/* Data Table */}\n            <Grid item xs={12} sx={{ justifyContent: 'center', display: 'flex', marginTop: '20px' }}>\n                <Paper\n                    elevation={2}\n                    sx={{\n                        width: '100%',\n                        borderRadius: 3,\n                        boxShadow: 2,\n                        p: { xs: 1, sm: 2 },\n                        background: '#fff',\n                        overflow: 'hidden',\n                    }}\n                >\n                    <DataGrid\n                        rows={safeRows}\n                        columns={columns}\n                        initialState={{ pagination: { paginationModel } }}\n                        pageSizeOptions={[5, 10, 20, 50, 100]}\n                        sx={{\n                            border: 0,\n                            width: '100%',\n                            fontSize: { xs: '0.9rem', sm: '1rem' },\n                            '.MuiDataGrid-columnHeaders': {\n                                background: 'linear-gradient(90deg, #43cea2 0%, #185a9d 100%)',\n                                // color: '#fff',\n                                fontWeight: 700,\n                                fontSize: '1rem',\n                            },\n                            '.MuiDataGrid-row:hover': {\n                                background: 'rgba(67,206,162,0.08)',\n                                transition: 'background 0.2s',\n                            },\n                        }}\n                    />\n                </Paper>\n            </Grid>\n\n            {/* User Form Dialog */}\n            <UserFormDialog\n                open={formDialogOpen}\n                handleClose={() => setFormDialogOpen(false)}\n                handleSubmit={handleFormSubmit}\n                form={form}\n                setForm={setForm}\n                roles={roles}\n                isEdit={isEdit}\n            />\n\n            {/* Snackbar for feedback */}\n            <Snackbar open={snackbar.open} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\n                    {snackbar.message}\n                </Alert>\n            </Snackbar>\n            <Loader open={open} />\n        </Box>\n    );\n};\n\nexport default ListAllUsers;"],"names":["Loader","_ref","open","handleClose","_jsx","Modal","onClose","children","_jsxs","Box","sx","position","top","left","transform","bgcolor","p","display","flexDirection","alignItems","justifyContent","CircularProgress","style","marginTop","UserFormDialog","handleSubmit","form","setForm","roles","isEdit","Dialog","maxWidth","fullWidth","DialogTitle","background","color","DialogContent","py","Grid","container","spacing","width","mt","item","xs","sm","TextField","label","name","value","firstname","onChange","e","target","required","variant","lastname","email","type","mobilenumber","password","FormControl","InputLabel","id","Select","labelId","role","MenuItem","map","_id","rolename","status","DialogActions","px","pb","Button","onClick","startIcon","EditIcon","AddCircleIcon","fontWeight","boxShadow","ListAllUsers","useSelector","state","userRole","userList","data","loading","updateUser","dispatch","useDispatch","setOpen","useNavigate","useState","formDialogOpen","setFormDialogOpen","setIsEdit","editUserId","setEditUserId","snackbar","setSnackbar","message","severity","useEffect","fetchUsersList","fetchUserRoles","handleCloseSnackbar","columns","field","headerName","renderCell","params","Chip","_e$row","_e$row2","_Fragment","user","_roles$find","find","handleEditUser","row","markActive","marginLeft","safeRows","idx","_row$id","_row$role","_row$role2","_roles$find2","newStatus","then","minHeight","Paper","elevation","flexWrap","mb","borderRadius","Typography","letterSpacing","gap","handleOpenForm","exportUsers","csvContent","col","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","removeChild","overflow","DataGrid","rows","initialState","pagination","paginationModel","pageSize","page","pageSizeOptions","border","fontSize","transition","async","preventDefault","res","error","addUser","Snackbar","autoHideDuration","Alert"],"sourceRoot":""}